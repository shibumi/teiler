#!/bin/bash

# Menus

mainMenu () {
    isRecording && STATE_RECORDING="3. Stop recording screencast"
    menu=("0: Cancel"
          "1. Screenshot (Fullscreen)"
          "2. Screenshot (Area)"
          "${STATE_RECORDING:-"3. Screencast"}"
          "---"
          "4. Copy Last Image to Clipboard"
          "5. Upload Clipboard Content"
          "6. Upload a File"
          "---"
          "$quickName")

    prompt() {
        printf "%s\n" "$@" | dmenu_t -p "Teiler:"
    }

   promptDelay() {
        printf "%s\n" "$@" | dmenu_t -p "Delay:"
    }

    case "$(prompt "${menu[@]}")" in 
        0:*) exit ;;
        1.*) delayPrompt screenshot -d ;;
        2.*) delayPrompt screenshot -s -d ;;
        3.*) isRecording && stopRecording && sleep 2 && askPrompt || screencast ;;
        4.*) imgClip ;;
        5.*) clipUpload ;;
        6.*) uploadMenu ;;
        7.*) quick ;;
          *) exit
    esac
}

askPrompt () {
    menu=("1. Yes"
          "2. No")
    
    prompt() { 
        printf "%s\n" "$@" | dmenu_t -p "Upload Video?"
    }
       
       case "$(prompt "${menu[@]}")" in
       1.*) instantUpload mp4 "$scp_path_vid" "$http_vid" ;;
       2.*) exit ;;
         *) exit
   esac
}

uploadMenu () {
    menu=("0: << back to Main Menu"
          "1. Upload last Image"
          "2. Upload last Video"
          "3. Image"
          "4. Video")

    prompt() {
        printf "%s\n" "$@" | dmenu_t -p "Upload:"
    }

       case "$(prompt "${menu[@]}")" in
       0:*) mainMenu ;;
       1.*) instantUpload png "$scp_path_img" "$http_img" ;;
       2.*) instantUpload mp4 "$scp_path_vid" "$http_vid" ;;
       3.*) upLoad "$(imgListFiles png)" "$scp_path_img" "$http_img" ;;
       4.*) upLoad "$(vidListFiles mp4)" "$scp_path_vid" "$http_vid" ;;
         *) mainMenu
   esac
}

delayPrompt () {
    t=$(promptDelay 0 2 5 10 20 30 '<< back to Main Menu')
    [[ "$t" = *[[:digit:]]* ]] || mainMenu
    [[ "$t" -gt 2 ]] && {
        notify "$time" "Screenshot will be taken in $t seconds"
        countdown "$t" | progress 0 "$t" &
        DELAY_PID=$!
    }
    "$@" $((t+1))
    unset DELAY_PID
    killCountdown
}


# main function

# actual screenshot function
screenshot () {
    type scrot &>/dev/null || { echo "Missing scrot!"; exit 1; }
    [[ -f "${img_path}/lastimg.png" ]] && rm "${img_path}/lastimg.png"
    scrot "$@" "${img_path}/lastimg.png"
    notify "$time" "Screenshot saved"
    archiveImage
}

quick () {
    screenshot -d $quickDelay $quickArea
    instantUpload png "$scp_path_img" "$http_img"
}


# screencast related functions (screencast, isRecording, stopRecording)
screencast () {
    type avconv || type ffmpeg &>/dev/null || { echo "Missing Dependencies"; exit 1; }
    isRecording && {
        notify "$time" 'Screencast already in progress'
        echo "Already recording Screen"; exit 1;
}
    [[ -f "${vid_path}/lastvid.mp4" ]] && rm "${vid_path}/lastvid.mp4"
    $encoder -f x11grab -s $res -i $ffmpeg_display+$ffmpeg_offset $ffaudio $encopts "${vid_path}/lastvid.mp4" &
    echo "$!" > "$SCREENCAST_PIDFILE"
    indicator
    notify "$time" "Screencast started"
}

isRecording () {
    [[ -f "$SCREENCAST_PIDFILE" ]] || return 1;
}

stopRecording () {
    local pid
    [[ -f $SCREENCAST_PIDFILE ]] && {
        pid=$(cat "$SCREENCAST_PIDFILE")
        pid2=$(cat "$INDICATOR_PIDFILE")
        isRecording && kill "$pid" "$pid2"
        rm "$SCREENCAST_PIDFILE"
        rm "$INDICATOR_PIDFILE"
    }
    notify "$time" "Stopped recording"
    archiveVid
    return 0
}


# copy last image to clipboard
imgClip () {
    imgclip "$img_path"/lastimg.png &
}


# archiving functions
archiveImage () {
    [[ "$archive_img" = '1' ]] || return
    mv "${img_path}/lastimg.png" "${img_path}/${img_filemask}.png"
    ln -s "${img_path}/${img_filemask}.png" "${img_path}/lastimg.png"
}


archiveVid () {
    [[ "$archive_vid" = '1' ]] || return
    mv "${vid_path}/lastvid.mp4" "${vid_path}/${vid_filemask}.mp4"
    ln -s "${vid_path}/${vid_filemask}.mp4" "${vid_path}/lastvid.mp4"
}


archivePaste () {
    [[ "$archive_paste" = '1' ]] || return
    mv "${paste_path}/lastpaste.paste" "${paste_path}/${paste_filemask}.paste"
    ln -s "${paste_path}/${paste_filemask}.paste" "${paste_path}/lastpaste.paste"
}


# misc functions

# notification and indicator functions
notify () {
    notify-send -u low --hint=int:transient:1 -t "$1" "Teiler" "$2"
}

indicator () {
    echo "$rec_text" | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w 120 \
    -x $(( ( $(xininfo -mon-width)-120)/2 )) -xs $(echo $(( $(xininfo -active-mon) + 1 ))) -p &
    echo "$!" > "$INDICATOR_PIDFILE"
}

function countdown {
    for i in $(seq $[$1-1] -1 0); do
         for o in {9..0}; do
         echo $i.$o; sleep 0.1
    done
    done
}

function killCountdown {
    [[ -n "$DELAY_PID" ]] && notify 'delayed screenshot aborted!'
    [[ -f "/proc/$DELAY_PID/comm" && "$(</proc/$DELAY_PID/comm)" = "$progname" ]] \
        && kill $DELAY_PID
    exit 0
}

function progress {
    gdbar -min $1 -max $2 -w 100 -h 8 | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w 120 \
    -x $(( ( $(xininfo -mon-width)-120)/2 )) -xs $(echo $(( $(xininfo -active-mon) + 1 ))) -p 1
}


# filelistings for the upLoad function
imgListFiles () {
    ls -t -1 "$img_path"/"$namekey"-*."$1" | dmenu_t -p "Select File:"
}

vidListFiles () {
    ls -t -1 "$vid_path"/"$namekey"-*."$1" | dmenu_t -p "Select File:"
}


# horrible long upload functions
clipUpload () {
    [[ -f "${paste_path}/lastpaste.paste" ]] && rm "${paste_path}/lastpaste.paste"
    x_clip
    (xclip -o) > "${paste_path}/lastpaste.paste"
    notify "$time" "Paste saved"

    if [[ $paste_ul == scp ]]; then
        scp "${paste_path}/lastpaste.paste" "$scp_host":"$scp_path_paste"/"$paste_filemask".paste
        notify-send -u low --hint=int:transient:1 -t "$time" "Paste Uploaded" "${http_paste}/${paste_filemask}.paste"
        echo -n "${http_paste}/${paste_filemask}.paste" | xclip
    elif [[ $paste_ul == fb ]]; then
        fb "${paste_path}/lastpaste.paste"
        notify-send -u low --hint=int:transient:1 -t "$time" "Paste Uploaded" "$(echo -n $(xclip -o))"
    elif [[ $paste_ul == ix ]]; then
        x_xclip
        xclip -o 2>&1 | curl -F 'f:1=<-' ix.io | tr -d "\n" | xclip
        notify-send -u low --hint=int:transient:1 -t "$time" "Paste Uploaded" "$(echo -n $(xclip -o))"
    fi
    x_clip
    archivePaste
}

upLoad () {
    if [[ $1 == png ]]; then
        type="Image"
    elif [[ $1 == mp4 ]]; then
        type="Video"
    fi
    if [[ "$ul" == "scp" ]]; then
        scp "$1" "$scp_host":/"$2/"
        notify-send -u low --hint=int:transient:1 -t "$time" "$(echo $type) Uploaded" "$3/$(basename "$1")"
        echo -n "$3/$(basename "$1")" | xclip
    elif [[ "$ul" == "fb" ]]; then
        fb "$1"
        notify-send -u low --hint=int:transient:1 -t "$time" "$(echo $type) Uploaded" "$(xclip -o)"
    elif [[ "$ul" == "imgur" ]]; then
        if [[ $1 == mp4 ]]; then
            notify-send -u critical --hint=int:transient:1 -t "$time" "teiler" "imgur does not support Videos"
        else 
            imgur "$1"
            notify-send -u low --hint=int:transient:1 -t "$time" "$(echo $type) Uploaded" "$(xclip -o)"
        fi
    fi
    x_clip
}

instantUpload () {
    if [[ $1 == png ]]; then
        if [[ "$archive_img" == 1 ]]; then
            file=$(readlink "$img_path"/lastimg.png)
        else 
            file="$img_path/lastimg.png"
        fi
        type="Image"
    elif [[ $1 == mp4 ]]; then
        if [[ "$archive_vid" == 1 ]]; then
            file=$(readlink "$vid_path"/lastvid.mp4)
        else 
            file="${vid_path}/lastvid.mp4"
        fi
        type="Video"
    fi
    if [[ "$ul" == scp ]]; then
        echo $file
        scp "$file" "$scp_host":/"$2/"
        notify-send -u low --hint=int:transient:1 -t "$time" "$(echo $type) Uploaded" "$3/$(basename "$file")"
        echo -n "$3/$(basename "$file")" | xclip
    elif [[ "$ul" == fb ]]; then
        fb "$file"
        notify-send -u low --hint=int:transient:1 -t "$time" "$(echo $type) Uploaded" "$(xclip -o)"
    elif [[ "$ul" == imgur ]]; then
        if [[ $1 == mp4 ]]; then
            notify-send -u critical --hint=int:transient:1 -t "$time" "teiler" "imgur does not support Videos"
        else
            imgur "$file"
            notify-send -u low --hint=int:transient:1 -t "$time" "$(echo $type) Uploaded" "$(xclip -o)"
        fi
    fi
    x_clip
}

x_clip () {
    (xclip -o) | xclip -selection clipboard
}

################################################################################################################


type dmenu &>/dev/null || type simpleswitcher &>/dev/null || { echo "Missing Dependencies"; exit 1; }


source "$HOME/.config/teiler/config"
source "$HOME/.config/dmenurc"

if [[ "$backend" == "simpleswitcher" ]]
    then function dmenu_t () {
    simpleswitcher -font "$font" -fg "$nf" -bg "$nb" -hlfg "$sf" -hlbg "$sb" -o 90 -bc "$bc" -dmenu "$@"
}

elif [[ "$backend" == "dmenu" ]]
    then function dmenu_t () {
    dmenu -l 15 -fn "$font" -nf "$nf" -nb "$nb" -sf "$sf" -sb "$sb" -o 90 "$@"
}
fi

mainMenu

